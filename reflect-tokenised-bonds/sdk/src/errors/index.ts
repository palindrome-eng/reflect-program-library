/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */

type ErrorWithCode = Error & { code: number }
type MaybeErrorWithCode = ErrorWithCode | null | undefined

const createErrorFromCodeLookup: Map<number, () => ErrorWithCode> = new Map()
const createErrorFromNameLookup: Map<string, () => ErrorWithCode> = new Map()

/**
 * InvalidSigner: 'Invalid transaction signer.'
 *
 * @category Errors
 * @category generated
 */
export class InvalidSignerError extends Error {
  readonly code: number = 0x1770
  readonly name: string = 'InvalidSigner'
  constructor() {
    super('Invalid transaction signer.')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, InvalidSignerError)
    }
  }
}

createErrorFromCodeLookup.set(0x1770, () => new InvalidSignerError())
createErrorFromNameLookup.set('InvalidSigner', () => new InvalidSignerError())

/**
 * ProgramAccountsMismatch: 'ProgramAccountsMismatch'
 *
 * @category Errors
 * @category generated
 */
export class ProgramAccountsMismatchError extends Error {
  readonly code: number = 0x1771
  readonly name: string = 'ProgramAccountsMismatch'
  constructor() {
    super('ProgramAccountsMismatch')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, ProgramAccountsMismatchError)
    }
  }
}

createErrorFromCodeLookup.set(0x1771, () => new ProgramAccountsMismatchError())
createErrorFromNameLookup.set(
  'ProgramAccountsMismatch',
  () => new ProgramAccountsMismatchError()
)

/**
 * InvalidReceiptTokenSupply: 'InvalidReceiptTokenSupply'
 *
 * @category Errors
 * @category generated
 */
export class InvalidReceiptTokenSupplyError extends Error {
  readonly code: number = 0x1772
  readonly name: string = 'InvalidReceiptTokenSupply'
  constructor() {
    super('InvalidReceiptTokenSupply')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, InvalidReceiptTokenSupplyError)
    }
  }
}

createErrorFromCodeLookup.set(
  0x1772,
  () => new InvalidReceiptTokenSupplyError()
)
createErrorFromNameLookup.set(
  'InvalidReceiptTokenSupply',
  () => new InvalidReceiptTokenSupplyError()
)

/**
 * InvalidReceiptTokenMintAuthority: 'InvalidReceiptTokenMintAuthority'
 *
 * @category Errors
 * @category generated
 */
export class InvalidReceiptTokenMintAuthorityError extends Error {
  readonly code: number = 0x1773
  readonly name: string = 'InvalidReceiptTokenMintAuthority'
  constructor() {
    super('InvalidReceiptTokenMintAuthority')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, InvalidReceiptTokenMintAuthorityError)
    }
  }
}

createErrorFromCodeLookup.set(
  0x1773,
  () => new InvalidReceiptTokenMintAuthorityError()
)
createErrorFromNameLookup.set(
  'InvalidReceiptTokenMintAuthority',
  () => new InvalidReceiptTokenMintAuthorityError()
)

/**
 * InvalidReceiptTokenFreezeAuthority: 'InvalidReceiptTokenFreezeAuthority'
 *
 * @category Errors
 * @category generated
 */
export class InvalidReceiptTokenFreezeAuthorityError extends Error {
  readonly code: number = 0x1774
  readonly name: string = 'InvalidReceiptTokenFreezeAuthority'
  constructor() {
    super('InvalidReceiptTokenFreezeAuthority')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, InvalidReceiptTokenFreezeAuthorityError)
    }
  }
}

createErrorFromCodeLookup.set(
  0x1774,
  () => new InvalidReceiptTokenFreezeAuthorityError()
)
createErrorFromNameLookup.set(
  'InvalidReceiptTokenFreezeAuthority',
  () => new InvalidReceiptTokenFreezeAuthorityError()
)

/**
 * InvalidReceiptTokenSetup: 'InvalidReceiptTokenSetup'
 *
 * @category Errors
 * @category generated
 */
export class InvalidReceiptTokenSetupError extends Error {
  readonly code: number = 0x1775
  readonly name: string = 'InvalidReceiptTokenSetup'
  constructor() {
    super('InvalidReceiptTokenSetup')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, InvalidReceiptTokenSetupError)
    }
  }
}

createErrorFromCodeLookup.set(0x1775, () => new InvalidReceiptTokenSetupError())
createErrorFromNameLookup.set(
  'InvalidReceiptTokenSetup',
  () => new InvalidReceiptTokenSetupError()
)

/**
 * InvalidReceiptTokenDecimals: 'InvalidReceiptTokenDecimals'
 *
 * @category Errors
 * @category generated
 */
export class InvalidReceiptTokenDecimalsError extends Error {
  readonly code: number = 0x1776
  readonly name: string = 'InvalidReceiptTokenDecimals'
  constructor() {
    super('InvalidReceiptTokenDecimals')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, InvalidReceiptTokenDecimalsError)
    }
  }
}

createErrorFromCodeLookup.set(
  0x1776,
  () => new InvalidReceiptTokenDecimalsError()
)
createErrorFromNameLookup.set(
  'InvalidReceiptTokenDecimals',
  () => new InvalidReceiptTokenDecimalsError()
)

/**
 * ZeroDivision: 'ZeroDivision'
 *
 * @category Errors
 * @category generated
 */
export class ZeroDivisionError extends Error {
  readonly code: number = 0x1777
  readonly name: string = 'ZeroDivision'
  constructor() {
    super('ZeroDivision')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, ZeroDivisionError)
    }
  }
}

createErrorFromCodeLookup.set(0x1777, () => new ZeroDivisionError())
createErrorFromNameLookup.set('ZeroDivision', () => new ZeroDivisionError())

/**
 * MathOverflow: 'MathOverflow'
 *
 * @category Errors
 * @category generated
 */
export class MathOverflowError extends Error {
  readonly code: number = 0x1778
  readonly name: string = 'MathOverflow'
  constructor() {
    super('MathOverflow')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, MathOverflowError)
    }
  }
}

createErrorFromCodeLookup.set(0x1778, () => new MathOverflowError())
createErrorFromNameLookup.set('MathOverflow', () => new MathOverflowError())

/**
 * MissingAccounts: 'MissingAccounts'
 *
 * @category Errors
 * @category generated
 */
export class MissingAccountsError extends Error {
  readonly code: number = 0x1779
  readonly name: string = 'MissingAccounts'
  constructor() {
    super('MissingAccounts')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, MissingAccountsError)
    }
  }
}

createErrorFromCodeLookup.set(0x1779, () => new MissingAccountsError())
createErrorFromNameLookup.set(
  'MissingAccounts',
  () => new MissingAccountsError()
)

/**
 * AmountTooLow: 'AmountTooLow'
 *
 * @category Errors
 * @category generated
 */
export class AmountTooLowError extends Error {
  readonly code: number = 0x177a
  readonly name: string = 'AmountTooLow'
  constructor() {
    super('AmountTooLow')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, AmountTooLowError)
    }
  }
}

createErrorFromCodeLookup.set(0x177a, () => new AmountTooLowError())
createErrorFromNameLookup.set('AmountTooLow', () => new AmountTooLowError())

/**
 * Attempts to resolve a custom program error from the provided error code.
 * @category Errors
 * @category generated
 */
export function errorFromCode(code: number): MaybeErrorWithCode {
  const createError = createErrorFromCodeLookup.get(code)
  return createError != null ? createError() : null
}

/**
 * Attempts to resolve a custom program error from the provided error name, i.e. 'Unauthorized'.
 * @category Errors
 * @category generated
 */
export function errorFromName(name: string): MaybeErrorWithCode {
  const createError = createErrorFromNameLookup.get(name)
  return createError != null ? createError() : null
}

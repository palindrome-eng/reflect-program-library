/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */

import * as beet from '@metaplex-foundation/beet'
import * as web3 from '@solana/web3.js'
import * as beetSolana from '@metaplex-foundation/beet-solana'

/**
 * Arguments used to create {@link RTBProtocol}
 * @category Accounts
 * @category generated
 */
export type RTBProtocolArgs = {
  nextVaultSeed: beet.bignum
}

export const rTBProtocolDiscriminator = [155, 187, 38, 140, 84, 25, 172, 167]
/**
 * Holds the data for the {@link RTBProtocol} Account and provides de/serialization
 * functionality for that data
 *
 * @category Accounts
 * @category generated
 */
export class RTBProtocol implements RTBProtocolArgs {
  private constructor(readonly nextVaultSeed: beet.bignum) {}

  /**
   * Creates a {@link RTBProtocol} instance from the provided args.
   */
  static fromArgs(args: RTBProtocolArgs) {
    return new RTBProtocol(args.nextVaultSeed)
  }

  /**
   * Deserializes the {@link RTBProtocol} from the data of the provided {@link web3.AccountInfo}.
   * @returns a tuple of the account data and the offset up to which the buffer was read to obtain it.
   */
  static fromAccountInfo(
    accountInfo: web3.AccountInfo<Buffer>,
    offset = 0
  ): [RTBProtocol, number] {
    return RTBProtocol.deserialize(accountInfo.data, offset)
  }

  /**
   * Retrieves the account info from the provided address and deserializes
   * the {@link RTBProtocol} from its data.
   *
   * @throws Error if no account info is found at the address or if deserialization fails
   */
  static async fromAccountAddress(
    connection: web3.Connection,
    address: web3.PublicKey,
    commitmentOrConfig?: web3.Commitment | web3.GetAccountInfoConfig
  ): Promise<RTBProtocol> {
    const accountInfo = await connection.getAccountInfo(
      address,
      commitmentOrConfig
    )
    if (accountInfo == null) {
      throw new Error(`Unable to find RTBProtocol account at ${address}`)
    }
    return RTBProtocol.fromAccountInfo(accountInfo, 0)[0]
  }

  /**
   * Provides a {@link web3.Connection.getProgramAccounts} config builder,
   * to fetch accounts matching filters that can be specified via that builder.
   *
   * @param programId - the program that owns the accounts we are filtering
   */
  static gpaBuilder(
    programId: web3.PublicKey = new web3.PublicKey(
      '6ZZ1sxKGuXUBL8HSsHqHaYCg92G9VhMNTcJv1gFURCop'
    )
  ) {
    return beetSolana.GpaBuilder.fromStruct(programId, rTBProtocolBeet)
  }

  /**
   * Deserializes the {@link RTBProtocol} from the provided data Buffer.
   * @returns a tuple of the account data and the offset up to which the buffer was read to obtain it.
   */
  static deserialize(buf: Buffer, offset = 0): [RTBProtocol, number] {
    return rTBProtocolBeet.deserialize(buf, offset)
  }

  /**
   * Serializes the {@link RTBProtocol} into a Buffer.
   * @returns a tuple of the created Buffer and the offset up to which the buffer was written to store it.
   */
  serialize(): [Buffer, number] {
    return rTBProtocolBeet.serialize({
      accountDiscriminator: rTBProtocolDiscriminator,
      ...this,
    })
  }

  /**
   * Returns the byteSize of a {@link Buffer} holding the serialized data of
   * {@link RTBProtocol}
   */
  static get byteSize() {
    return rTBProtocolBeet.byteSize
  }

  /**
   * Fetches the minimum balance needed to exempt an account holding
   * {@link RTBProtocol} data from rent
   *
   * @param connection used to retrieve the rent exemption information
   */
  static async getMinimumBalanceForRentExemption(
    connection: web3.Connection,
    commitment?: web3.Commitment
  ): Promise<number> {
    return connection.getMinimumBalanceForRentExemption(
      RTBProtocol.byteSize,
      commitment
    )
  }

  /**
   * Determines if the provided {@link Buffer} has the correct byte size to
   * hold {@link RTBProtocol} data.
   */
  static hasCorrectByteSize(buf: Buffer, offset = 0) {
    return buf.byteLength - offset === RTBProtocol.byteSize
  }

  /**
   * Returns a readable version of {@link RTBProtocol} properties
   * and can be used to convert to JSON and/or logging
   */
  pretty() {
    return {
      nextVaultSeed: (() => {
        const x = <{ toNumber: () => number }>this.nextVaultSeed
        if (typeof x.toNumber === 'function') {
          try {
            return x.toNumber()
          } catch (_) {
            return x
          }
        }
        return x
      })(),
    }
  }
}

/**
 * @category Accounts
 * @category generated
 */
export const rTBProtocolBeet = new beet.BeetStruct<
  RTBProtocol,
  RTBProtocolArgs & {
    accountDiscriminator: number[] /* size: 8 */
  }
>(
  [
    ['accountDiscriminator', beet.uniformFixedSizeArray(beet.u8, 8)],
    ['nextVaultSeed', beet.u64],
  ],
  RTBProtocol.fromArgs,
  'RTBProtocol'
)

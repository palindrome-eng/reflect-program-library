"use strict";
/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.NonZeroReceiptSupplyError = exports.InvalidFreezeAuthorityError = exports.InvalidMintAuthorityError = exports.LockupNotExpiredError = exports.InsufficientDepositError = exports.InvalidVaultSeedError = void 0;
exports.errorFromCode = errorFromCode;
exports.errorFromName = errorFromName;
const createErrorFromCodeLookup = new Map();
const createErrorFromNameLookup = new Map();
/**
 * InvalidVaultSeed: 'Vault PDA is derived with invalid vault seed.'
 *
 * @category Errors
 * @category generated
 */
class InvalidVaultSeedError extends Error {
    constructor() {
        super('Vault PDA is derived with invalid vault seed.');
        this.code = 0x1770;
        this.name = 'InvalidVaultSeed';
        if (typeof Error.captureStackTrace === 'function') {
            Error.captureStackTrace(this, InvalidVaultSeedError);
        }
    }
}
exports.InvalidVaultSeedError = InvalidVaultSeedError;
createErrorFromCodeLookup.set(0x1770, () => new InvalidVaultSeedError());
createErrorFromNameLookup.set('InvalidVaultSeed', () => new InvalidVaultSeedError());
/**
 * InsufficientDeposit: 'Insufficient deposit amount.'
 *
 * @category Errors
 * @category generated
 */
class InsufficientDepositError extends Error {
    constructor() {
        super('Insufficient deposit amount.');
        this.code = 0x1771;
        this.name = 'InsufficientDeposit';
        if (typeof Error.captureStackTrace === 'function') {
            Error.captureStackTrace(this, InsufficientDepositError);
        }
    }
}
exports.InsufficientDepositError = InsufficientDepositError;
createErrorFromCodeLookup.set(0x1771, () => new InsufficientDepositError());
createErrorFromNameLookup.set('InsufficientDeposit', () => new InsufficientDepositError());
/**
 * LockupNotExpired: 'Lockup period has not expired.'
 *
 * @category Errors
 * @category generated
 */
class LockupNotExpiredError extends Error {
    constructor() {
        super('Lockup period has not expired.');
        this.code = 0x1772;
        this.name = 'LockupNotExpired';
        if (typeof Error.captureStackTrace === 'function') {
            Error.captureStackTrace(this, LockupNotExpiredError);
        }
    }
}
exports.LockupNotExpiredError = LockupNotExpiredError;
createErrorFromCodeLookup.set(0x1772, () => new LockupNotExpiredError());
createErrorFromNameLookup.set('LockupNotExpired', () => new LockupNotExpiredError());
/**
 * InvalidMintAuthority: 'Invalid mint authority. Move mint authority of the receipt token to the vault PDA.'
 *
 * @category Errors
 * @category generated
 */
class InvalidMintAuthorityError extends Error {
    constructor() {
        super('Invalid mint authority. Move mint authority of the receipt token to the vault PDA.');
        this.code = 0x1773;
        this.name = 'InvalidMintAuthority';
        if (typeof Error.captureStackTrace === 'function') {
            Error.captureStackTrace(this, InvalidMintAuthorityError);
        }
    }
}
exports.InvalidMintAuthorityError = InvalidMintAuthorityError;
createErrorFromCodeLookup.set(0x1773, () => new InvalidMintAuthorityError());
createErrorFromNameLookup.set('InvalidMintAuthority', () => new InvalidMintAuthorityError());
/**
 * InvalidFreezeAuthority: 'Invalid freeze authority. Move freeze authority of the receipt token to the vault PDA, or remove it completely.'
 *
 * @category Errors
 * @category generated
 */
class InvalidFreezeAuthorityError extends Error {
    constructor() {
        super('Invalid freeze authority. Move freeze authority of the receipt token to the vault PDA, or remove it completely.');
        this.code = 0x1774;
        this.name = 'InvalidFreezeAuthority';
        if (typeof Error.captureStackTrace === 'function') {
            Error.captureStackTrace(this, InvalidFreezeAuthorityError);
        }
    }
}
exports.InvalidFreezeAuthorityError = InvalidFreezeAuthorityError;
createErrorFromCodeLookup.set(0x1774, () => new InvalidFreezeAuthorityError());
createErrorFromNameLookup.set('InvalidFreezeAuthority', () => new InvalidFreezeAuthorityError());
/**
 * NonZeroReceiptSupply: 'Supply of the receipt token has to be 0. Pre-minting is not allowed.'
 *
 * @category Errors
 * @category generated
 */
class NonZeroReceiptSupplyError extends Error {
    constructor() {
        super('Supply of the receipt token has to be 0. Pre-minting is not allowed.');
        this.code = 0x1775;
        this.name = 'NonZeroReceiptSupply';
        if (typeof Error.captureStackTrace === 'function') {
            Error.captureStackTrace(this, NonZeroReceiptSupplyError);
        }
    }
}
exports.NonZeroReceiptSupplyError = NonZeroReceiptSupplyError;
createErrorFromCodeLookup.set(0x1775, () => new NonZeroReceiptSupplyError());
createErrorFromNameLookup.set('NonZeroReceiptSupply', () => new NonZeroReceiptSupplyError());
/**
 * Attempts to resolve a custom program error from the provided error code.
 * @category Errors
 * @category generated
 */
function errorFromCode(code) {
    const createError = createErrorFromCodeLookup.get(code);
    return createError != null ? createError() : null;
}
/**
 * Attempts to resolve a custom program error from the provided error name, i.e. 'Unauthorized'.
 * @category Errors
 * @category generated
 */
function errorFromName(name) {
    const createError = createErrorFromNameLookup.get(name);
    return createError != null ? createError() : null;
}

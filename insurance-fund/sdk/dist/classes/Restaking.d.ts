import { AccountInfo, Connection, Keypair, PublicKey, TransactionInstruction } from "@solana/web3.js";
import { Admin, Asset, Cooldown, Deposit, InitializeInsuranceFundArgs, Intent, Lockup, RewardBoost, Settings } from "../generated";
import BN from "bn.js";
import { Account } from "@solana/spl-token";
type InsuranceFundAccount = Asset | Admin | Cooldown | Deposit | Intent | Lockup | RewardBoost | Settings;
export declare class Restaking {
    private connection;
    constructor(connection: Connection);
    accountFromBuffer<T extends InsuranceFundAccount>(schema: {
        fromAccountInfo: (accountInfo: AccountInfo<Buffer>) => [T, number];
    }, accountInfo: AccountInfo<Buffer>): T;
    getLockups(): Promise<any>;
    getLockupsByAsset(assetMint: PublicKey): Promise<any>;
    getAssets(): Promise<any>;
    getDeposits(): Promise<any>;
    getDepositsByUser(user: PublicKey): Promise<any>;
    getCooldowns(): Promise<any>;
    getCooldownsByDeposit(depositId: BN | number): Promise<any>;
    getCooldownsByUser(user: PublicKey): Promise<any>;
    getRewardBoostsForLockup(lockup: PublicKey): Promise<any>;
    getRewardBoostsForLockupByDepositSize(lockup: PublicKey, depositSize: BN): Promise<any>;
    getIntents(): Promise<any>;
    static deriveAdmin(address: PublicKey): PublicKey;
    getAdmins(): Promise<any>;
    getAdminFromPublicKey(address: PublicKey): Promise<{
        pubkey: PublicKey;
        account: Admin;
    }>;
    static deriveSettings(): PublicKey;
    initializeInsuranceFund(admin: PublicKey, args: InitializeInsuranceFundArgs): Promise<TransactionInstruction>;
    getSettingsData(): Promise<Settings>;
    static deriveLockup(index: number | BN): PublicKey;
    static deriveAsset(mint: PublicKey): PublicKey;
    static deriveAssetPool(type: "vault" | "reward_pool", lockup: PublicKey, assetMint: PublicKey): PublicKey;
    static deriveLockupColdVault(lockup: PublicKey, assetMint: PublicKey): PublicKey;
    getLockupColdVault(address: PublicKey): Promise<Account>;
    static deriveLockupHotVault(lockup: PublicKey, assetMint: PublicKey): PublicKey;
    getLockupHotVault(address: PublicKey): Promise<Account>;
    static deriveLockupCooldownVault(lockup: PublicKey, receiptMint: PublicKey): PublicKey;
    getLockupCooldownVault(address: PublicKey): Promise<Account>;
    createToken(signer: PublicKey, lockup: PublicKey, depositToken: PublicKey, withMetadata?: boolean): Promise<{
        instructions: TransactionInstruction[];
        mint: Keypair;
    }>;
    initializeLockup(signer: PublicKey, assetMint: PublicKey, depositCap: BN, minDeposit: BN, duration: BN, governanceYield?: BN): Promise<{
        instructions: TransactionInstruction[];
        signer: Keypair;
    }>;
    addAsset(signer: PublicKey, assetMint: PublicKey, oracle: PublicKey): Promise<TransactionInstruction>;
    static deriveRewardBoost(lockup: PublicKey, boostId: number | BN): PublicKey;
    getLockup(lockup: PublicKey): Promise<Lockup>;
    getReceiptToDepositsExchangeRateBps(lockup: PublicKey): Promise<BN>;
    boostRewards(signer: PublicKey, lockupId: BN, minUsdValue: BN, boostBps: BN): Promise<TransactionInstruction>;
    depositRewards(lockupId: BN, amount: BN, signer: PublicKey): Promise<TransactionInstruction>;
    static deriveIntent(deposit: PublicKey): PublicKey;
    static deriveDeposit(lockup: PublicKey, depositId: BN | number): PublicKey;
    getDeposit(deposit: PublicKey): Promise<Deposit>;
    static deriveDepositReceiptVault(deposit: PublicKey, receiptToken: PublicKey): PublicKey;
    getDepositReceiptVault(address: PublicKey): Promise<Account>;
    createIntent(lockupId: BN | number, depositId: BN | number, amount: BN): Promise<TransactionInstruction>;
    getIntent(intent: PublicKey): Promise<Intent>;
    private manageFreeze;
    freeze(signer: PublicKey): Promise<void>;
    unfreeze(signer: PublicKey): Promise<void>;
    slash(amount: BN, signer: PublicKey, lockupId: BN, destination: PublicKey): Promise<TransactionInstruction>;
    getAsset(asset: PublicKey): Promise<Asset>;
    restake(signer: PublicKey, amount: BN, lockupId: BN): Promise<TransactionInstruction>;
    static deriveCooldown(deposit: PublicKey): PublicKey;
    requestWithdrawal(signer: PublicKey, lockupId: BN | number, depositId: BN | number, mode: "ExactIn" | "ExactOut", amount: BN, rewardBoostId?: BN | number): Promise<TransactionInstruction>;
    requestWithdrawalWithAutoBoostDetection(signer: PublicKey, depositId: BN | number, lockupId: BN | number, mode: "ExactIn" | "ExactOut", amount: BN): Promise<TransactionInstruction>;
    withdrawCooldown(signer: PublicKey, lockupId: BN | number, depositId: BN | number): Promise<TransactionInstruction>;
}
export {};

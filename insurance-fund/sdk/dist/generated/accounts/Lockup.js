"use strict";
/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.lockupBeet = exports.Lockup = exports.lockupDiscriminator = void 0;
const beet = __importStar(require("@metaplex-foundation/beet"));
const web3 = __importStar(require("@solana/web3.js"));
const beetSolana = __importStar(require("@metaplex-foundation/beet-solana"));
const YieldMode_1 = require("../types/YieldMode");
const SlashState_1 = require("../types/SlashState");
exports.lockupDiscriminator = [1, 45, 32, 32, 57, 81, 88, 67];
/**
 * Holds the data for the {@link Lockup} Account and provides de/serialization
 * functionality for that data
 *
 * @category Accounts
 * @category generated
 */
class Lockup {
    constructor(bump, index, assetMint, receiptMint, receiptToRewardExchangeRateBpsAccumulator, minDeposit, duration, deposits, rewardBoosts, yieldMode, slashState, depositCap) {
        this.bump = bump;
        this.index = index;
        this.assetMint = assetMint;
        this.receiptMint = receiptMint;
        this.receiptToRewardExchangeRateBpsAccumulator = receiptToRewardExchangeRateBpsAccumulator;
        this.minDeposit = minDeposit;
        this.duration = duration;
        this.deposits = deposits;
        this.rewardBoosts = rewardBoosts;
        this.yieldMode = yieldMode;
        this.slashState = slashState;
        this.depositCap = depositCap;
    }
    /**
     * Creates a {@link Lockup} instance from the provided args.
     */
    static fromArgs(args) {
        return new Lockup(args.bump, args.index, args.assetMint, args.receiptMint, args.receiptToRewardExchangeRateBpsAccumulator, args.minDeposit, args.duration, args.deposits, args.rewardBoosts, args.yieldMode, args.slashState, args.depositCap);
    }
    /**
     * Deserializes the {@link Lockup} from the data of the provided {@link web3.AccountInfo}.
     * @returns a tuple of the account data and the offset up to which the buffer was read to obtain it.
     */
    static fromAccountInfo(accountInfo, offset = 0) {
        return Lockup.deserialize(accountInfo.data, offset);
    }
    /**
     * Retrieves the account info from the provided address and deserializes
     * the {@link Lockup} from its data.
     *
     * @throws Error if no account info is found at the address or if deserialization fails
     */
    static fromAccountAddress(connection, address, commitmentOrConfig) {
        return __awaiter(this, void 0, void 0, function* () {
            const accountInfo = yield connection.getAccountInfo(address, commitmentOrConfig);
            if (accountInfo == null) {
                throw new Error(`Unable to find Lockup account at ${address}`);
            }
            return Lockup.fromAccountInfo(accountInfo, 0)[0];
        });
    }
    /**
     * Provides a {@link web3.Connection.getProgramAccounts} config builder,
     * to fetch accounts matching filters that can be specified via that builder.
     *
     * @param programId - the program that owns the accounts we are filtering
     */
    static gpaBuilder(programId = new web3.PublicKey('rhLMe6vyM1wVLJaxrWUckVmPxSia58nSWZRDtYQow6D')) {
        return beetSolana.GpaBuilder.fromStruct(programId, exports.lockupBeet);
    }
    /**
     * Deserializes the {@link Lockup} from the provided data Buffer.
     * @returns a tuple of the account data and the offset up to which the buffer was read to obtain it.
     */
    static deserialize(buf, offset = 0) {
        return exports.lockupBeet.deserialize(buf, offset);
    }
    /**
     * Serializes the {@link Lockup} into a Buffer.
     * @returns a tuple of the created Buffer and the offset up to which the buffer was written to store it.
     */
    serialize() {
        return exports.lockupBeet.serialize(Object.assign({ accountDiscriminator: exports.lockupDiscriminator }, this));
    }
    /**
     * Returns the byteSize of a {@link Buffer} holding the serialized data of
     * {@link Lockup} for the provided args.
     *
     * @param args need to be provided since the byte size for this account
     * depends on them
     */
    static byteSize(args) {
        const instance = Lockup.fromArgs(args);
        return exports.lockupBeet.toFixedFromValue(Object.assign({ accountDiscriminator: exports.lockupDiscriminator }, instance)).byteSize;
    }
    /**
     * Fetches the minimum balance needed to exempt an account holding
     * {@link Lockup} data from rent
     *
     * @param args need to be provided since the byte size for this account
     * depends on them
     * @param connection used to retrieve the rent exemption information
     */
    static getMinimumBalanceForRentExemption(args, connection, commitment) {
        return __awaiter(this, void 0, void 0, function* () {
            return connection.getMinimumBalanceForRentExemption(Lockup.byteSize(args), commitment);
        });
    }
    /**
     * Returns a readable version of {@link Lockup} properties
     * and can be used to convert to JSON and/or logging
     */
    pretty() {
        return {
            bump: this.bump,
            index: (() => {
                const x = this.index;
                if (typeof x.toNumber === 'function') {
                    try {
                        return x.toNumber();
                    }
                    catch (_) {
                        return x;
                    }
                }
                return x;
            })(),
            assetMint: this.assetMint.toBase58(),
            receiptMint: this.receiptMint.toBase58(),
            receiptToRewardExchangeRateBpsAccumulator: (() => {
                const x = (this.receiptToRewardExchangeRateBpsAccumulator);
                if (typeof x.toNumber === 'function') {
                    try {
                        return x.toNumber();
                    }
                    catch (_) {
                        return x;
                    }
                }
                return x;
            })(),
            minDeposit: (() => {
                const x = this.minDeposit;
                if (typeof x.toNumber === 'function') {
                    try {
                        return x.toNumber();
                    }
                    catch (_) {
                        return x;
                    }
                }
                return x;
            })(),
            duration: (() => {
                const x = this.duration;
                if (typeof x.toNumber === 'function') {
                    try {
                        return x.toNumber();
                    }
                    catch (_) {
                        return x;
                    }
                }
                return x;
            })(),
            deposits: (() => {
                const x = this.deposits;
                if (typeof x.toNumber === 'function') {
                    try {
                        return x.toNumber();
                    }
                    catch (_) {
                        return x;
                    }
                }
                return x;
            })(),
            rewardBoosts: (() => {
                const x = this.rewardBoosts;
                if (typeof x.toNumber === 'function') {
                    try {
                        return x.toNumber();
                    }
                    catch (_) {
                        return x;
                    }
                }
                return x;
            })(),
            yieldMode: this.yieldMode.__kind,
            slashState: this.slashState,
            depositCap: this.depositCap,
        };
    }
}
exports.Lockup = Lockup;
/**
 * @category Accounts
 * @category generated
 */
exports.lockupBeet = new beet.FixableBeetStruct([
    ['accountDiscriminator', beet.uniformFixedSizeArray(beet.u8, 8)],
    ['bump', beet.u8],
    ['index', beet.u64],
    ['assetMint', beetSolana.publicKey],
    ['receiptMint', beetSolana.publicKey],
    ['receiptToRewardExchangeRateBpsAccumulator', beet.u64],
    ['minDeposit', beet.u64],
    ['duration', beet.u64],
    ['deposits', beet.u64],
    ['rewardBoosts', beet.u64],
    ['yieldMode', YieldMode_1.yieldModeBeet],
    ['slashState', SlashState_1.slashStateBeet],
    ['depositCap', beet.coption(beet.u64)],
], Lockup.fromArgs, 'Lockup');

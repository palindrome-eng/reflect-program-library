/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */

import * as splToken from '@solana/spl-token'
import * as beet from '@metaplex-foundation/beet'
import * as web3 from '@solana/web3.js'
import { BorrowArgs, borrowArgsBeet } from '../types/BorrowArgs'

/**
 * @category Instructions
 * @category Borrow
 * @category generated
 */
export type BorrowInstructionArgs = {
  args: BorrowArgs
}
/**
 * @category Instructions
 * @category Borrow
 * @category generated
 */
export const borrowStruct = new beet.BeetArgsStruct<
  BorrowInstructionArgs & {
    instructionDiscriminator: number[] /* size: 8 */
  }
>(
  [
    ['instructionDiscriminator', beet.uniformFixedSizeArray(beet.u8, 8)],
    ['args', borrowArgsBeet],
  ],
  'BorrowInstructionArgs'
)
/**
 * Accounts required by the _borrow_ instruction
 *
 * @property [_writable_, **signer**] signer
 * @property [] admin
 * @property [_writable_] settings
 * @property [] fromToken
 * @property [_writable_] fromLockup
 * @property [] fromAsset
 * @property [] fromOracle
 * @property [_writable_] fromHotVault
 * @property [_writable_] reflectFromTokenAccount
 * @property [_writable_] debtRecord
 * @category Instructions
 * @category Borrow
 * @category generated
 */
export type BorrowInstructionAccounts = {
  signer: web3.PublicKey
  admin: web3.PublicKey
  settings: web3.PublicKey
  fromToken: web3.PublicKey
  fromLockup: web3.PublicKey
  fromAsset: web3.PublicKey
  fromOracle: web3.PublicKey
  fromHotVault: web3.PublicKey
  reflectFromTokenAccount: web3.PublicKey
  debtRecord: web3.PublicKey
  tokenProgram?: web3.PublicKey
  systemProgram?: web3.PublicKey
  anchorRemainingAccounts?: web3.AccountMeta[]
}

export const borrowInstructionDiscriminator = [
  228, 253, 131, 202, 207, 116, 89, 18,
]

/**
 * Creates a _Borrow_ instruction.
 *
 * @param accounts that will be accessed while the instruction is processed
 * @param args to provide as instruction data to the program
 *
 * @category Instructions
 * @category Borrow
 * @category generated
 */
export function createBorrowInstruction(
  accounts: BorrowInstructionAccounts,
  args: BorrowInstructionArgs,
  programId = new web3.PublicKey('rhLMe6vyM1wVLJaxrWUckVmPxSia58nSWZRDtYQow6D')
) {
  const [data] = borrowStruct.serialize({
    instructionDiscriminator: borrowInstructionDiscriminator,
    ...args,
  })
  const keys: web3.AccountMeta[] = [
    {
      pubkey: accounts.signer,
      isWritable: true,
      isSigner: true,
    },
    {
      pubkey: accounts.admin,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.settings,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.fromToken,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.fromLockup,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.fromAsset,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.fromOracle,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.fromHotVault,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.reflectFromTokenAccount,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.debtRecord,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.tokenProgram ?? splToken.TOKEN_PROGRAM_ID,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.systemProgram ?? web3.SystemProgram.programId,
      isWritable: false,
      isSigner: false,
    },
  ]

  if (accounts.anchorRemainingAccounts != null) {
    for (const acc of accounts.anchorRemainingAccounts) {
      keys.push(acc)
    }
  }

  const ix = new web3.TransactionInstruction({
    programId,
    keys,
    data,
  })
  return ix
}

/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */

import * as splToken from '@solana/spl-token'
import * as beet from '@metaplex-foundation/beet'
import * as web3 from '@solana/web3.js'
import {
  DepositAndLockLpArgs,
  depositAndLockLpArgsBeet,
} from '../types/DepositAndLockLpArgs'

/**
 * @category Instructions
 * @category DepositAndLockLp
 * @category generated
 */
export type DepositAndLockLpInstructionArgs = {
  args: DepositAndLockLpArgs
}
/**
 * @category Instructions
 * @category DepositAndLockLp
 * @category generated
 */
export const depositAndLockLpStruct = new beet.BeetArgsStruct<
  DepositAndLockLpInstructionArgs & {
    instructionDiscriminator: number[] /* size: 8 */
  }
>(
  [
    ['instructionDiscriminator', beet.uniformFixedSizeArray(beet.u8, 8)],
    ['args', depositAndLockLpArgsBeet],
  ],
  'DepositAndLockLpInstructionArgs'
)
/**
 * Accounts required by the _depositAndLockLp_ instruction
 *
 * @property [_writable_, **signer**] signer
 * @property [] liquidityPool
 * @property [_writable_] lpLockup
 * @property [_writable_] position
 * @property [] receiptToken
 * @property [_writable_] depositReceiptTokenAccount
 * @property [_writable_] lpToken
 * @property [_writable_] lockupLpTokenVault
 * @property [] tokenA
 * @property [] tokenAAsset
 * @property [] tokenAOracle
 * @property [] tokenBAsset
 * @property [] tokenBOracle
 * @property [] tokenB
 * @property [_writable_] tokenAPool
 * @property [_writable_] tokenBPool
 * @property [_writable_] userTokenAAccount
 * @property [_writable_] userTokenBAccount
 * @category Instructions
 * @category DepositAndLockLp
 * @category generated
 */
export type DepositAndLockLpInstructionAccounts = {
  signer: web3.PublicKey
  liquidityPool: web3.PublicKey
  lpLockup: web3.PublicKey
  position: web3.PublicKey
  receiptToken: web3.PublicKey
  depositReceiptTokenAccount: web3.PublicKey
  lpToken: web3.PublicKey
  lockupLpTokenVault: web3.PublicKey
  tokenA: web3.PublicKey
  tokenAAsset: web3.PublicKey
  tokenAOracle: web3.PublicKey
  tokenBAsset: web3.PublicKey
  tokenBOracle: web3.PublicKey
  tokenB: web3.PublicKey
  tokenAPool: web3.PublicKey
  tokenBPool: web3.PublicKey
  userTokenAAccount: web3.PublicKey
  userTokenBAccount: web3.PublicKey
  tokenProgram?: web3.PublicKey
  systemProgram?: web3.PublicKey
  anchorRemainingAccounts?: web3.AccountMeta[]
}

export const depositAndLockLpInstructionDiscriminator = [
  185, 31, 247, 78, 110, 46, 76, 34,
]

/**
 * Creates a _DepositAndLockLp_ instruction.
 *
 * @param accounts that will be accessed while the instruction is processed
 * @param args to provide as instruction data to the program
 *
 * @category Instructions
 * @category DepositAndLockLp
 * @category generated
 */
export function createDepositAndLockLpInstruction(
  accounts: DepositAndLockLpInstructionAccounts,
  args: DepositAndLockLpInstructionArgs,
  programId = new web3.PublicKey('rhLMe6vyM1wVLJaxrWUckVmPxSia58nSWZRDtYQow6D')
) {
  const [data] = depositAndLockLpStruct.serialize({
    instructionDiscriminator: depositAndLockLpInstructionDiscriminator,
    ...args,
  })
  const keys: web3.AccountMeta[] = [
    {
      pubkey: accounts.signer,
      isWritable: true,
      isSigner: true,
    },
    {
      pubkey: accounts.liquidityPool,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.lpLockup,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.position,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.receiptToken,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.depositReceiptTokenAccount,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.lpToken,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.lockupLpTokenVault,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.tokenA,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.tokenAAsset,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.tokenAOracle,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.tokenBAsset,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.tokenBOracle,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.tokenB,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.tokenAPool,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.tokenBPool,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.userTokenAAccount,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.userTokenBAccount,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.tokenProgram ?? splToken.TOKEN_PROGRAM_ID,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.systemProgram ?? web3.SystemProgram.programId,
      isWritable: false,
      isSigner: false,
    },
  ]

  if (accounts.anchorRemainingAccounts != null) {
    for (const acc of accounts.anchorRemainingAccounts) {
      keys.push(acc)
    }
  }

  const ix = new web3.TransactionInstruction({
    programId,
    keys,
    data,
  })
  return ix
}

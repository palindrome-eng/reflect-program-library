/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */

import * as splToken from '@solana/spl-token'
import * as beet from '@metaplex-foundation/beet'
import * as web3 from '@solana/web3.js'
import { SwapArgs, swapArgsBeet } from '../types/SwapArgs'

/**
 * @category Instructions
 * @category Swap
 * @category generated
 */
export type SwapInstructionArgs = {
  args: SwapArgs
}
/**
 * @category Instructions
 * @category Swap
 * @category generated
 */
export const swapStruct = new beet.FixableBeetArgsStruct<
  SwapInstructionArgs & {
    instructionDiscriminator: number[] /* size: 8 */
  }
>(
  [
    ['instructionDiscriminator', beet.uniformFixedSizeArray(beet.u8, 8)],
    ['args', swapArgsBeet],
  ],
  'SwapInstructionArgs'
)
/**
 * Accounts required by the _swap_ instruction
 *
 * @property [**signer**] signer
 * @property [] admin
 * @property [_writable_] settings
 * @property [] fromToken
 * @property [_writable_] fromLockup
 * @property [] fromAsset
 * @property [] fromOracle
 * @property [_writable_] fromHotVault
 * @property [_writable_] reflectFromTokenAccount
 * @property [] toToken
 * @property [_writable_] toLockup
 * @property [] toAsset
 * @property [] toOracle
 * @property [_writable_] toHotVault
 * @property [] reflectToTokenAccount
 * @category Instructions
 * @category Swap
 * @category generated
 */
export type SwapInstructionAccounts = {
  signer: web3.PublicKey
  admin: web3.PublicKey
  settings: web3.PublicKey
  fromToken: web3.PublicKey
  fromLockup: web3.PublicKey
  fromAsset: web3.PublicKey
  fromOracle: web3.PublicKey
  fromHotVault: web3.PublicKey
  reflectFromTokenAccount: web3.PublicKey
  toToken: web3.PublicKey
  toLockup: web3.PublicKey
  toAsset: web3.PublicKey
  toOracle: web3.PublicKey
  toHotVault: web3.PublicKey
  reflectToTokenAccount: web3.PublicKey
  tokenProgram?: web3.PublicKey
  anchorRemainingAccounts?: web3.AccountMeta[]
}

export const swapInstructionDiscriminator = [
  248, 198, 158, 145, 225, 117, 135, 200,
]

/**
 * Creates a _Swap_ instruction.
 *
 * @param accounts that will be accessed while the instruction is processed
 * @param args to provide as instruction data to the program
 *
 * @category Instructions
 * @category Swap
 * @category generated
 */
export function createSwapInstruction(
  accounts: SwapInstructionAccounts,
  args: SwapInstructionArgs,
  programId = new web3.PublicKey('rhLMe6vyM1wVLJaxrWUckVmPxSia58nSWZRDtYQow6D')
) {
  const [data] = swapStruct.serialize({
    instructionDiscriminator: swapInstructionDiscriminator,
    ...args,
  })
  const keys: web3.AccountMeta[] = [
    {
      pubkey: accounts.signer,
      isWritable: false,
      isSigner: true,
    },
    {
      pubkey: accounts.admin,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.settings,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.fromToken,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.fromLockup,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.fromAsset,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.fromOracle,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.fromHotVault,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.reflectFromTokenAccount,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.toToken,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.toLockup,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.toAsset,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.toOracle,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.toHotVault,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.reflectToTokenAccount,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.tokenProgram ?? splToken.TOKEN_PROGRAM_ID,
      isWritable: false,
      isSigner: false,
    },
  ]

  if (accounts.anchorRemainingAccounts != null) {
    for (const acc of accounts.anchorRemainingAccounts) {
      keys.push(acc)
    }
  }

  const ix = new web3.TransactionInstruction({
    programId,
    keys,
    data,
  })
  return ix
}

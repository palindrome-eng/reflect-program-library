/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */

import * as splToken from '@solana/spl-token'
import * as beet from '@metaplex-foundation/beet'
import * as web3 from '@solana/web3.js'
import { RepayArgs, repayArgsBeet } from '../types/RepayArgs'

/**
 * @category Instructions
 * @category Repay
 * @category generated
 */
export type RepayInstructionArgs = {
  args: RepayArgs
}
/**
 * @category Instructions
 * @category Repay
 * @category generated
 */
export const repayStruct = new beet.BeetArgsStruct<
  RepayInstructionArgs & {
    instructionDiscriminator: number[] /* size: 8 */
  }
>(
  [
    ['instructionDiscriminator', beet.uniformFixedSizeArray(beet.u8, 8)],
    ['args', repayArgsBeet],
  ],
  'RepayInstructionArgs'
)
/**
 * Accounts required by the _repay_ instruction
 *
 * @property [**signer**] signer
 * @property [_writable_] debtRecord
 * @property [] lockup
 * @property [] asset
 * @property [] assetMint
 * @property [_writable_] lockupHotVault
 * @property [_writable_] reflectTokenAccount
 * @category Instructions
 * @category Repay
 * @category generated
 */
export type RepayInstructionAccounts = {
  signer: web3.PublicKey
  debtRecord: web3.PublicKey
  lockup: web3.PublicKey
  asset: web3.PublicKey
  assetMint: web3.PublicKey
  lockupHotVault: web3.PublicKey
  reflectTokenAccount: web3.PublicKey
  tokenProgram?: web3.PublicKey
  anchorRemainingAccounts?: web3.AccountMeta[]
}

export const repayInstructionDiscriminator = [
  234, 103, 67, 82, 208, 234, 219, 166,
]

/**
 * Creates a _Repay_ instruction.
 *
 * @param accounts that will be accessed while the instruction is processed
 * @param args to provide as instruction data to the program
 *
 * @category Instructions
 * @category Repay
 * @category generated
 */
export function createRepayInstruction(
  accounts: RepayInstructionAccounts,
  args: RepayInstructionArgs,
  programId = new web3.PublicKey('rhLMe6vyM1wVLJaxrWUckVmPxSia58nSWZRDtYQow6D')
) {
  const [data] = repayStruct.serialize({
    instructionDiscriminator: repayInstructionDiscriminator,
    ...args,
  })
  const keys: web3.AccountMeta[] = [
    {
      pubkey: accounts.signer,
      isWritable: false,
      isSigner: true,
    },
    {
      pubkey: accounts.debtRecord,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.lockup,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.asset,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.assetMint,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.lockupHotVault,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.reflectTokenAccount,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.tokenProgram ?? splToken.TOKEN_PROGRAM_ID,
      isWritable: false,
      isSigner: false,
    },
  ]

  if (accounts.anchorRemainingAccounts != null) {
    for (const acc of accounts.anchorRemainingAccounts) {
      keys.push(acc)
    }
  }

  const ix = new web3.TransactionInstruction({
    programId,
    keys,
    data,
  })
  return ix
}

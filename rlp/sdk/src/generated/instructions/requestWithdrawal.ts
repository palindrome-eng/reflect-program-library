/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */

import * as splToken from '@solana/spl-token'
import * as beet from '@metaplex-foundation/beet'
import * as web3 from '@solana/web3.js'
import {
  RequestWithdrawalArgs,
  requestWithdrawalArgsBeet,
} from '../types/RequestWithdrawalArgs'

/**
 * @category Instructions
 * @category RequestWithdrawal
 * @category generated
 */
export type RequestWithdrawalInstructionArgs = {
  args: RequestWithdrawalArgs
}
/**
 * @category Instructions
 * @category RequestWithdrawal
 * @category generated
 */
export const requestWithdrawalStruct = new beet.BeetArgsStruct<
  RequestWithdrawalInstructionArgs & {
    instructionDiscriminator: number[] /* size: 8 */
  }
>(
  [
    ['instructionDiscriminator', beet.uniformFixedSizeArray(beet.u8, 8)],
    ['args', requestWithdrawalArgsBeet],
  ],
  'RequestWithdrawalInstructionArgs'
)
/**
 * Accounts required by the _requestWithdrawal_ instruction
 *
 * @property [_writable_, **signer**] signer
 * @property [_writable_] settings
 * @property [] permissions (optional)
 * @property [_writable_] liquidityPool
 * @property [_writable_] lpTokenMint
 * @property [_writable_] signerLpTokenAccount
 * @property [_writable_] cooldown
 * @property [_writable_] cooldownLpTokenAccount
 * @property [] associatedTokenProgram
 * @category Instructions
 * @category RequestWithdrawal
 * @category generated
 */
export type RequestWithdrawalInstructionAccounts = {
  signer: web3.PublicKey
  settings: web3.PublicKey
  permissions?: web3.PublicKey
  liquidityPool: web3.PublicKey
  lpTokenMint: web3.PublicKey
  signerLpTokenAccount: web3.PublicKey
  cooldown: web3.PublicKey
  cooldownLpTokenAccount: web3.PublicKey
  tokenProgram?: web3.PublicKey
  associatedTokenProgram: web3.PublicKey
  systemProgram?: web3.PublicKey
  anchorRemainingAccounts?: web3.AccountMeta[]
}

export const requestWithdrawalInstructionDiscriminator = [
  251, 85, 121, 205, 56, 201, 12, 177,
]

/**
 * Creates a _RequestWithdrawal_ instruction.
 *
 * Optional accounts that are not provided default to the program ID since
 * this was indicated in the IDL from which this instruction was generated.
 *
 * @param accounts that will be accessed while the instruction is processed
 * @param args to provide as instruction data to the program
 *
 * @category Instructions
 * @category RequestWithdrawal
 * @category generated
 */
export function createRequestWithdrawalInstruction(
  accounts: RequestWithdrawalInstructionAccounts,
  args: RequestWithdrawalInstructionArgs,
  programId = new web3.PublicKey('rhLMe6vyM1wVLJaxrWUckVmPxSia58nSWZRDtYQow6D')
) {
  const [data] = requestWithdrawalStruct.serialize({
    instructionDiscriminator: requestWithdrawalInstructionDiscriminator,
    ...args,
  })
  const keys: web3.AccountMeta[] = [
    {
      pubkey: accounts.signer,
      isWritable: true,
      isSigner: true,
    },
    {
      pubkey: accounts.settings,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.permissions ?? programId,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.liquidityPool,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.lpTokenMint,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.signerLpTokenAccount,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.cooldown,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.cooldownLpTokenAccount,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.tokenProgram ?? splToken.TOKEN_PROGRAM_ID,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.associatedTokenProgram,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.systemProgram ?? web3.SystemProgram.programId,
      isWritable: false,
      isSigner: false,
    },
  ]

  if (accounts.anchorRemainingAccounts != null) {
    for (const acc of accounts.anchorRemainingAccounts) {
      keys.push(acc)
    }
  }

  const ix = new web3.TransactionInstruction({
    programId,
    keys,
    data,
  })
  return ix
}
